#!/usr/bin/env python3
import argparse
import os
import shlex
import subprocess
import sys

import runner

class Workspace:
	def __init__(self, name, tabs):
		self.name = name
		self.tabs = tabs

class Setup:
	def __init__(self, history_dir, workspace):
		self.history_dir = history_dir
		self.workspace = workspace
		self.workspace_history_dir = os.path.join(self.history_dir, workspace.name)

	def history_file_path(self, tab_name):
		return os.path.join(self.workspace_history_dir, tab_name)

	def ensure_history_dir_exists(self):
		try:
			os.makedirs(self.workspace_history_dir)
		except FileExistsError:
			pass

	def inner_bash_commnad(self, tab_dir, tab_histfile, tab_name):
		it = map(shlex.quote, [tab_dir, tab_histfile, tab_name])
		return "WORKSPACE_TAB_DIR={} WORKSPACE_TAB_HISTFILE={} WORKSPACE_TAB_TITLE={} exec bash".format(*it)

	def launch_command(self):
		command = ["gnome-terminal"]
		for tab_name, tab_dir in self.workspace.tabs.items():
			# this is workaround gnome-terminal accepting only one command as param
			history_file = self.history_file_path(tab_name)
			inner = self.inner_bash_commnad(tab_dir, history_file, tab_name)
			outer = "bash -c " + shlex.quote(inner)
			command += ["--tab", "--command", outer]
		return command

if __name__ == "__main__":
	d = "Launches a terminal emulator with a particular tabs setup."
	parser = argparse.ArgumentParser(description=d, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument("--dry_run", action="store_true", default=False)
	parser.add_argument("workspace_name", type=str)
	parser.add_argument("history_dir", default="~/history", help="where are histories collected (for all workspaces)", nargs="?", type=str)
	parser.add_argument("-d", "--tab_dir", action="append", required=True)
	parser.add_argument("-t", "--tab_name", action="append", required=True)

	args = parser.parse_args()

	if len(args.tab_name) != len(args.tab_dir):
		parser.error("names/dirs number mismatch")

	tabs = dict()
	for name, dir in zip(args.tab_name, args.tab_dir):
		tabs[name] = dir

	history_dir = os.path.expanduser(args.history_dir)

	workspace = Workspace(args.workspace_name, tabs)
	setup = Setup(history_dir, workspace)
	command = setup.launch_command()

	if args.dry_run:
		runner.echo(command)
	else:
		setup.ensure_history_dir_exists()
		runner.run(command)
